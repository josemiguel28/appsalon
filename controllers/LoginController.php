<?phpnamespace Controller;use Clases\Email;use Clases\Request;use JetBrains\PhpStorm\NoReturn;use Model\ActiveRecord;use Model\Usuario;use MVC\Router;use PHPMailer\PHPMailer\Exception;class LoginController extends ActiveRecord{    public static function login(Router $router): void    {        $auth = new Usuario();        $alertas = [];        if (isPostBack()) {            $auth = new Usuario($_POST);            $alertas = $auth->validarLoginInputs();            if (empty($alertas)) {              if(self::isUserRegistered($auth)){                  self::authUser($auth);              }else {                  Usuario::setAlerta('error', 'El usuario no existe');              }            }         }        $alertas = Usuario::getAlertas();        $router->render("auth/login",            [                "alertas" => $alertas,                "auth" => $auth            ]);    }    private static function isUserRegistered(Usuario $auth): bool    {        $usuario = Usuario::where("email", $auth->email);        if ($usuario) {            if ($usuario->comprobarPasswordAndVerificado($auth->password)) {                self::authUser($usuario);                return true;            }        }        return false;    }    private static function authUser(Usuario $user)    {        session_start();        $request = new Request();        $request->session('id', $user->id);        $request->session('nombre', $user->nombre . " " . $user->apellido);        $request->session('email', $user->email);        $request->session('loggedAt', date('Y-m-d H:i:s'));        $request->session('login', true);        //redireccionamiento        if ($user->admin === '1') {            $request->session('admin', $user->admin ?? null);            header('Location: /admin');        } else {            header('Location: /cita');        }    }    #[NoReturn] public static function logout(): void    {        session_start();        $_SESSION = [];        session_destroy();        header("Location: /");        exit;    }    public static function mensaje(Router $router): void    {        $router->render('auth/mensaje');    }    public static function confirmar(Router $router): void    {        $alertas = [];        $token = '';        $request = new Request();        $token = $request->get("token");        $usuario = Usuario::where('token', $token);        if (empty($usuario) || $usuario->token === '') {            Usuario::setAlerta('error', "Error, token no valido");        } else {            $usuario->confirmado = "1";            $usuario->token = '';            $usuario->guardar();            Usuario::setAlerta('exito', "Cuenta confirmada correctamente");        }        //pasa las alertas para renderizarlas        $alertas = Usuario::getAlertas();        $router->render(            'auth/confirmar-cuenta',            [                'alertas' => $alertas            ]);    }}